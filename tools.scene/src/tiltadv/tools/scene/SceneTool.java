package tiltadv.tools.scene;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.backends.lwjgl.LwjglFiles;
import com.badlogic.gdx.utils.Json;
import dhcoder.tool.command.CommandManager;
import dhcoder.tool.command.Shortcut;
import dhcoder.tool.libgdx.serialization.ShortcutsLoader;
import tiltadv.tools.scene.forms.FirstRunForm;
import tiltadv.tools.scene.serialization.SettingsLoader;
import tiltadv.tools.scene.serialization.SettingsLoader.AppSettings;

import javax.swing.*;
import java.awt.*;

/**
 * Main class for the scene tool. Acts as a collection of all high level UI elements and components, as well
 * as being the entry point of the application.
 */
public final class SceneTool extends JFrame {

    private static final String PATH_CONFIG = "config/scene/";

    public static void main(final String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                SceneTool sceneTool = new SceneTool();
                sceneTool.run(1280, 720);
            }
        });
    }

    private final GlobalCommands globalCommands;

//    private CommandWindow commandWindow;

    static {
        Gdx.files = new LwjglFiles();
    }

    private JPanel panelRoot;

    public SceneTool() throws HeadlessException {
        super("Scene Editor");

        Shortcut.setKeyNameProvider(new SwingKeyNameProvider());
        setContentPane(panelRoot);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        overlapPane = new OverlapPane();
        panelRoot.add(overlapPane, BorderLayout.CENTER);

        Json json = new Json();
        AppSettings appSettings = SettingsLoader.load(json, PATH_CONFIG + "settings.json");

        CommandManager commandManager = new CommandManager();
        globalCommands = new GlobalCommands(this, commandManager);
        loadShortcuts(json, commandManager);

        commandWindow = new CommandWindow(this, commandManager);

        FirstRunForm firstRunForm = new FirstRunForm(globalCommands);
        overlapPane.addComponent(firstRunForm.getPanelRoot());

        CommandListener commandListener = new CommandListener(globalCommands.globalScope);
        commandListener.registerUmbrellaListener(rootPane);
    }

    public void run(final int width, final int height) {
        pack();
        setSize(width, height);
        setVisible(true);
    }

    public void showCommandWindow() {
        commandWindow.pack();
        commandWindow.setLocation(getX() + getWidth() / 2 - commandWindow.getWidth() / 2, getY() + 50);
        commandWindow.setVisible(true);
    }


    private void loadShortcuts(final Json json, final CommandManager commandManager) {
        ShortcutsLoader.load(json, commandManager, PATH_CONFIG + "shortcuts.json");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelRoot = new JPanel();
        panelRoot.setLayout(new BorderLayout(0, 0));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return panelRoot; }
}
