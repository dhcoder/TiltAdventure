package tiltadv.tools.scene;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.backends.lwjgl.LwjglFiles;
import com.badlogic.gdx.utils.Json;
import dhcoder.tool.command.Command;
import dhcoder.tool.command.CommandManager;
import dhcoder.tool.command.CommandScope;
import dhcoder.tool.command.Shortcut;
import dhcoder.tool.javafx.command.JavaFXKeyNameProvider;
import dhcoder.tool.libgdx.serialization.ShortcutsLoader;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import tiltadv.tools.scene.serialization.SettingsLoader;
import tiltadv.tools.scene.view.NoSceneViewController;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

/**
 * Main class for the scene tool. Acts as a collection of all high level UI elements and components, as well
 * as being the entry point of the application.
 */
public final class SceneTool extends Application {

    private static final String PATH_CONFIG = "config/scene/";

    public static void main(final String[] args) {
        Application.launch(args);
    }

//    private final GlobalCommands globalCommands;

//    private CommandWindow commandWindow;

    static {
    }

    private JPanel panelRoot;

    public SceneTool() {
        Gdx.files = new LwjglFiles();
        Shortcut.setKeyNameProvider(new JavaFXKeyNameProvider());

//        CommandManager commandManager = new CommandManager();
//        globalCommands = new GlobalCommands(this, commandManager);
//        loadShortcuts(json, commandManager);

//        commandWindow = new CommandWindow(this, commandManager);

//        FirstRunForm firstRunForm = new FirstRunForm(globalCommands);
//        overlapPane.addComponent(firstRunForm.getPanelRoot());

//        CommandListener commandListener = new CommandListener(globalCommands.globalScope);
//        commandListener.registerUmbrellaListener(rootPane);

    }

    @Override
    public void start(final Stage stage) {
        Json json = new Json();
        SettingsLoader.AppSettings appSettings = SettingsLoader.load(json, PATH_CONFIG + "settings.json");

        stage.setTitle("Scene Editor");

        StackPane rootPane = new StackPane();

        try {
            // Load person overview.
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(SceneTool.class.getResource("view/NoSceneView.fxml"));
            Pane noSceneView = (Pane)loader.load();

            rootPane.getChildren().add(noSceneView);

            // Give the controller access to the main app.
            NoSceneViewController controller = loader.getController();
            Command dummyCommand =
                new Command("dummy_id", new CommandScope("dummy_scope"), "Show Command Window", "Yeah", () -> {});

            controller.setCommandWindowCommand(dummyCommand);

        } catch (IOException e) {
            e.printStackTrace();
        }

        Scene scene = new Scene(rootPane, appSettings.getWidth(), appSettings.getHeight());

        stage.setScene(scene);
        stage.show();
    }

    public void showCommandWindow() {
//        commandWindow.pack();
//        commandWindow.setLocation(getX() + getWidth() / 2 - commandWindow.getWidth() / 2, getY() + 50);
//        commandWindow.setVisible(true);
    }

    private void loadShortcuts(final Json json, final CommandManager commandManager) {
        ShortcutsLoader.load(json, commandManager, PATH_CONFIG + "shortcuts.json");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelRoot = new JPanel();
        panelRoot.setLayout(new BorderLayout(0, 0));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return panelRoot; }
}