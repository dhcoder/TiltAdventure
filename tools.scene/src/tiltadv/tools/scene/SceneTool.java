package tiltadv.tools.scene;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.backends.lwjgl.LwjglFiles;
import com.badlogic.gdx.utils.Json;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import dhcoder.libgdx.tool.command.CommandManager;
import dhcoder.libgdx.tool.command.serialization.ShortcutsLoader;
import dhcoder.libgdx.tool.scene2d.widget.CommandTree;
import dhcoder.libgdx.tool.scene2d.widget.CommandWindow;
import tiltadv.tools.scene.serialization.SettingsLoader;
import tiltadv.tools.scene.serialization.SettingsLoader.AppSettings;

import javax.swing.*;
import java.awt.*;

import static dhcoder.support.text.StringUtils.format;

/**
 * Main class for the scene tool. Acts as a collection of all high level UI elements and components, as well
 * as being the entry point of the application.
 */
public final class SceneTool extends JFrame {

    private static final String PATH_CONFIG = "config/scene/";

    public static void main(final String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                SceneTool sceneTool = new SceneTool();
                sceneTool.run();
                sceneTool.setSize(1280, 720);
            }
        });
    }

    private final GlobalCommands globalCommands;

    private JPanel panelRoot;
    private JPanel panelSceneEditor;
    private JLabel labelCommandWindow;
    private JPanel panelFirstRun;
    private JButton button1;
    private CommandWindow commandWindow;
    private CommandTree commandTree;

    static {
        Gdx.files = new LwjglFiles();
    }

    public SceneTool() throws HeadlessException {
        super("Scene Editor");
        setContentPane(panelRoot);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        Json json = new Json();
        AppSettings appSettings = SettingsLoader.load(json, PATH_CONFIG + "settings.json");

        CommandManager commandManager = new CommandManager();
        globalCommands = new GlobalCommands(this, commandManager);
        loadShortcuts(json, commandManager);

        labelCommandWindow.setText(format("<html>Press <b>{0}</b> to open the command window</html>",
            globalCommands.showCommandWindow.getShortcutOpt().getValue()));
//        labelCommandTree.setText(format("Once open, try searching for \"{0}\" and press <ENTER>",
//            globalCommands.toggleCommandTree.getName()));

//        commandWindow = new CommandWindow(commandManager, skin);
//        commandWindow.setVisible(false);
//        commandWindowTable.add(commandWindow).expandY().fillY().width(400f).fillX().top().pad(20f, 0f, 0f, 0f);
//
//        commandTree = new CommandTree(commandManager, skin);
//        commandTree.setVisible(false);
//        stage.addActor(commandTree);
    }

    public void run() {
        pack();
        setVisible(true);
    }

    public CommandWindow getCommandWindow() {
        return commandWindow;
    }

    public CommandTree getCommandTree() {
        return commandTree;
    }

    private void loadShortcuts(final Json json, final CommandManager commandManager) {
        ShortcutsLoader.load(json, commandManager, PATH_CONFIG + "shortcuts.json");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelRoot = new JPanel();
        panelRoot.setLayout(new CardLayout(0, 0));
        panelFirstRun = new JPanel();
        panelFirstRun.setLayout(new FormLayout("fill:d:grow", "center:d:grow"));
        panelRoot.add(panelFirstRun, "CardFirstRun");
        labelCommandWindow = new JLabel();
        labelCommandWindow.setFont(
            new Font(labelCommandWindow.getFont().getName(), Font.PLAIN, labelCommandWindow.getFont().getSize()));
        labelCommandWindow.setHorizontalAlignment(10);
        labelCommandWindow.setHorizontalTextPosition(11);
        labelCommandWindow.setText("(command window shortcut)");
        CellConstraints cc = new CellConstraints();
        panelFirstRun.add(labelCommandWindow, cc.xy(1, 1, CellConstraints.CENTER, CellConstraints.DEFAULT));
        panelSceneEditor = new JPanel();
        panelSceneEditor.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelRoot.add(panelSceneEditor, "CardSceneEditor");
        button1 = new JButton();
        button1.setText("Button");
        panelSceneEditor.add(button1,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return panelRoot; }
}
