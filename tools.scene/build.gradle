apply plugin: "java"

dependencies {
    compile project(":dhcoder.libgdx")
    compile project(":dhcoder.tool")
    compile project(":dhcoder.tool.javafx")
    compile project(":dhcoder.tool.libgdx")
    compile "org.controlsfx:controlsfx:$controlsFxVersion"
//    compile "com.intellij:forms_rt:7.0.3"
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
}

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]

//src.options.fork = true;
//compile.options.forkOptions.executable='/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/bin'

project.ext.mainClassName = "tiltadv.tools.scene.SceneTool"
project.ext.assetsDir = new File("../android/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

tasks.withType(JavaCompile) {
    options.fork = true;
    options.forkOptions.executable = '/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/bin/javac'
}

dist.dependsOn classes
